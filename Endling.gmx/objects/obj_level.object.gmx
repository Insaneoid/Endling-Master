<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Level creation
// Resize
room_width  = (CELL/16) * 720;
room_height = (CELL/16) * 720;

// Grid size
var width   = room_width div CELL;
var height  = room_height div CELL;

// Create Grid
grid        = ds_grid_create(width, height);

// Create AI Grid
gridAI      = mp_grid_create(0, 0, width, height, CELL, CELL);

// Fill Grid
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Randomise
randomize();

// Controller
var cx      = width div 2;
var cy      = height div 2;
// Direction (Right = 0, Up = 1 etc)
var cdir    = irandom(3);

//Player
instance_create(cx*CELL+CELL/2, cy*CELL+CELL/2, obj_player);


// Create level
repeat (1000) {
    grid[# cx, cy] = FLOOR;
    
    // Change direction of controller
    if (scr_odds(1)) {
        cdir = irandom(3);
    }
    
    // Move the controller
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    
    cx += xdir;
    cy += ydir;
    
    // Prevent moving beyond grid
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
}

// Select type
var bgW = bg_wall_tiles;
var bgF = bg_floor;


// Add walls
for (var yy = 1; yy &lt; height-1; yy++) {
    for(var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            if (grid[# xx+1, yy] != FLOOR) {
                grid[# xx+1, yy] = WALL;
            }
             if (grid[# xx-1, yy] != FLOOR) {
                grid[# xx-1, yy] = WALL;
            }
             if (grid[# xx, yy+1] != FLOOR) {
                grid[# xx, yy+1] = WALL;
            }
             if (grid[# xx, yy-1] != FLOOR) {
                grid[# xx, yy-1] = WALL;
            }
        }
    }
}

// Remove single walls
for (var yy = 1; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++) {
        if (grid[# xx, yy] == WALL) &amp;&amp; (grid[# xx+1, yy] == FLOOR) &amp;&amp; (grid[# xx-1, yy] == FLOOR) &amp;&amp; (grid[# xx, yy+1] == FLOOR) &amp;&amp; (grid[# xx, yy-1] == FLOOR) {
            grid[# xx, yy] = FLOOR;
        }
    }
}

// Draw room
for (var yy = 0; yy &lt; height; yy++) {
    for (var xx = 0; xx &lt; width; xx++) {
        if (grid[# xx, yy] == FLOOR) {
            tile_add(bgF, 1, 1, CELL, CELL, xx*CELL, yy*CELL, 0);                                   
        } else if (grid[# xx, yy] == VOID) {
            tile_add(bg_void, 0, 0, CELL, CELL, xx*CELL, yy*CELL, 0);
            mp_grid_add_cell(gridAI, xx, yy);
        } else {
            mp_grid_add_cell(gridAI, xx, yy);
        }
    } 
}

// Tile sizes
var tw = CELL/2;
var th = CELL/2;    

// Add tiles         
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            var tx = xx*tw;
            var ty = yy*th;
            
            var right   = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left    = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top     = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom  = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var tLeft   = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var tRight  = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var bLeft   = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            var bRight  = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            
            // Auto tile                   
            if (right) {
                if (bottom) {
                    tile_add(bgW, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } else if (top) {
                    if (tRight) {
                        tile_add(bgW, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bgW, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bgW, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bgW, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bgW, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } else if (top) {
                    if (tLeft) {
                        tile_add(bgW, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bgW, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bgW, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bgW, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!tRight) {
                    tile_add(bgW, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!tLeft) {
                    tile_add(bgW, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bgW, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bRight) {
                    tile_add(bgW, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } else if (!bLeft) {
                    tile_add(bgW, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } else {
                    tile_add(bgW, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }                             
        }
    }
}        

// Add blocks
for(xx = 0; xx &lt; width; xx++) {
    for(yy = 0; yy &lt; height; yy++) {
        if(grid[# xx, yy] == WALL) {
            instance_create(xx*CELL, yy*CELL, obj_wall);
        }
    }
}

ds_grid_draw(grid, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Restart the Room
if(gamepad_button_check_pressed(0, gp_face4)) {
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//remove grids
ds_grid_destroy(grid);
mp_grid_destroy(gridAI);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_draw(grid, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Restart the Room
room_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
